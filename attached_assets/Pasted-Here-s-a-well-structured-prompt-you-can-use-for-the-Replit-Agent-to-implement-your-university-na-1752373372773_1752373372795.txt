Here’s a well-structured prompt you can use for the **Replit Agent** to implement your university navigation system effectively:

---

### **Replit Agent Prompt: University Navigation System with React & Leaflet**  

**Objective:**  
Build a **university campus navigation system** with **real-time positioning**, **3D building visualization**, **multi-floor indoor maps**, and **admin management tools**—integrated into an existing React app.  

#### **Core Features Needed:**  
1. **Real-Time Geolocation Tracking**  
   - High-accuracy GPS tracking with fallback to WiFi/beacon for indoor positioning.  
   - Visualize user location with a radius indicator.  

2. **3D Building Rendering**  
   - Load GLTF models for realistic buildings with textures.  
   - Fallback to extruded polygons if 3D models are unavailable.  

3. **Multi-Floor Navigation**  
   - Interactive floor selector (buttons or dropdown).  
   - SVG-based floor plans with clickable rooms.  

4. **Indoor Wayfinding**  
   - Mark staircases, elevators, and corridors clearly.  
   - Pathfinding for accessible routes.  

5. **Admin Dashboard**  
   - CRUD operations for buildings, floors, and paths.  
   - Tools to upload floor plans and mark navigation nodes.  

6. **Turn-by-Turn Navigation**  
   - Draw optimized paths (indoor/outdoor).  
   - Numbered steps with instructions.  

#### **Code Snippets Provided (For Context):**  
- **Real-time geolocation tracking** with `navigator.geolocation`.  
- **3D building rendering** using `react-three-fiber`.  
- **Floor plan navigation** with SVG overlays.  
- **Pathfinding visualization** with Leaflet polylines.  

#### **What’s Missing & Needed:**  
1. **Indoor Positioning Integration**  
   - Bluetooth beacon/WiFi fingerprinting support.  
   - Example:  
     ```javascript
     const handleBeaconUpdate = (beaconData) => {
       setUserPosition(convertToCoordinates(beaconData));
     };
     ```  

2. **Pathfinding Algorithm**  
   - Graph-based navigation (Dijkstra/A*).  
   - Example structure:  
     ```javascript
     const navigationGraph = {
       nodes: [
         { id: 'room-101', floor: 1, coords: [x,y], links: ['corridor-1a'] }
       ]
     };
     ```  

3. **Admin UI for Managing Campus Data**  
   - Building/floor/path editors.  
   - Drag-and-drop floor plan annotator.  

4. **Optimization for Large Campuses**  
   - Lazy-loading 3D models with `React.Suspense`.  
   - Spatial indexing for fast queries.  

#### **Expected Output:**  
- A **working prototype** with:  
  - A **live map** showing user location.  
  - **3D buildings** with floor switching.  
  - **Navigation routes** (click a room → get directions).  
  - **Admin panel** to edit campus layout.  

#### **Additional Requests:**  
- Suggest best practices for **performance optimization** (e.g., Level of Detail for 3D models).  
- Provide **sample data structure** for buildings/floors/paths.  
- Show how to **integrate AR navigation** (using AR.js or similar).  
